/**
 * LedDriverMAX7219.cpp
 * Implementierung auf der Basis von 4 MAX7219 wie es der Ueberpixel verwendet.
 *
 * @mc       Arduino/RBBB
 * @autor    Christian Aschoff / caschoff _AT_ mac _DOT_ com
 * @version  1.0
 * @created  18.1.2013
 *
 * Versionshistorie:
 * V 1.0:  - Erstellt.
 */
#include "LedDriverMAX7219.h"

// #define DEBUG
#include "Debug.h"

/**
 * Initialisierung.
 * 
 * @param data Pin, an dem die Data-Line haengt.
 * @param clock Pin, an dem die Clock-Line haengt.
 * @param latch Pin, an dem die Latch-Line haengt.
 */
LedDriverMAX7219::LedDriverMAX7219(byte data, byte clock, byte load) {
  _ledControl = new LedControl(data, clock, load, 4);
}

/**
 * init() wird im Hauptprogramm in init() aufgerufen.
 * Hier sollten die LED-Treiber in eine definierten
 * Ausgangszustand gebracht werden.
 */
void LedDriverMAX7219::init() {
  setBrightness(7, 15);
  wakeUp();
  _ledControl->setLed(0, 6, 5, true); // 1
  delay(250);
  _ledControl->setLed(1, 5, 5, true); // 2
  delay(250);
  _ledControl->setLed(2, 6, 5, true); // 3
  delay(250);
  _ledControl->setLed(3, 5, 5, true); // 4
  delay(250);
}

/**
 * Den Bildschirm-Puffer auf die LED-Matrix schreiben.
 * 
 * @param onChange: TRUE, wenn es Aenderungen in dem Bildschirm-Puffer gab,
 *                  FALSE, wenn es ein Refresh-Aufruf war.
 */
void LedDriverMAX7219::writeScreenBufferToMatrix(word matrix[16], boolean onChange) {
  if(onChange) {
    for(byte y=0; y<16; y++) {
      for(byte x=0; x<16; x++) {
        if((matrix[y] & 1 << x) == (1 << x)) {
          setPixel(15-x, y, true);
        } else {
          setPixel(15-x, y, false);
        }
      }
    }
    // wir muessen die Eck-LEDs umsetzten...
    if((matrix[1] & 0b0000000000011111) == 0b0000000000011111) {
      _ledControl->setLed(0, 6, 5, true); // 1
    } else {
      _ledControl->setLed(0, 6, 5, false); // 1
    }
    if((matrix[0] & 0b0000000000011111) == 0b0000000000011111) {
      _ledControl->setLed(1, 5, 5, true); // 2
    } else {
      _ledControl->setLed(1, 5, 5, false); // 2
    }
    if((matrix[3] & 0b0000000000011111) == 0b0000000000011111) {
      _ledControl->setLed(2, 6, 5, true); // 3
    } else {
      _ledControl->setLed(2, 6, 5, false); // 3
    }
    if((matrix[2] & 0b0000000000011111) == 0b0000000000011111) {
      _ledControl->setLed(3, 5, 5, true); // 4
    } else {
      _ledControl->setLed(3, 5, 5, false); // 4
    }    
  }
}

/**
 * Die Helligkeit des Displays anpassen.
 * 
 * @param brightness Die Helligkeit.
 * @param maxBrightness Der max. Helligkeitswert.
 */
void LedDriverMAX7219::setBrightness(byte brightness, byte maxBrightness) {
  if(_brightness != brightness) {
    _brightness = brightness;
    _maxBrightness = maxBrightness;
    byte val = map(_brightness, 0, _maxBrightness, 0, 15);
    for(byte i = 0; i < 4; i++) {
      _ledControl->setIntensity(i, _brightness);
    }
  }
}

/**
 * Anpassung der Groesse des Bildspeichers.
 * 
 * @param linesToWrite Wieviel Zeilen aus dem Bildspeicher sollen 
 *                     geschrieben werden?
 */
void LedDriverMAX7219::setLinesToWrite(byte linesToWrite) {
}

/**
 * Das Display ausschalten.
 */
void LedDriverMAX7219::shutDown() {
  for(byte i = 0; i < 4; i++) {
    _ledControl->shutdown(i, true);
  }
}

/**
 * Das Display einschalten.
 */
void LedDriverMAX7219::wakeUp() {
  for(byte i = 0; i < 4; i++) {
    _ledControl->shutdown(i, false);
  }
}

/**
 * Den Dateninhalt des LED-Treibers loeschen.
 */
void LedDriverMAX7219::clearData() {
  for(byte i = 0; i < 4; i++) {
    _ledControl->clearDisplay(i);
  }
}

/**
 * Einen X/Y-koordinierten Pixel in der Matrix setzen.
 */
void LedDriverMAX7219::setPixel(byte x, byte y, boolean state) {
  // 1. MAX7219
  if((x < 6) && (y < 5)) {
    _ledControl->setLed(0, x, y, state);
  } 
  
  // 2. MAX7219
  if((x < 6) && (y > 4) && (y < 10)) {
    _ledControl->setLed(2, x, y-5, state);  
  } 
  
  // 3. MAX7219
  if((x > 5) && (x < 11) && (y < 5)) {
    _ledControl->setLed(1, x-6, y, state);
  } 
  
  // 4. MAX7219
  if((x > 5) && (x < 11) && (y > 4) && (y < 10)) {
    _ledControl->setLed(3, x-6, y-5, state);  
  }
}

